<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KRB(kabi Raj Budha) AI üá≥üáµ</title>
    <style>
        :root {
            --nepali-blue: #003893;
            --nepali-red: #DC143C;
            --ai-blue: #25a2f0;
            --code-bg: #1e1e1e;
        }
        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            margin: 0;
            padding: 0;
            background: #f8f9fa;
            color: #333;
        }
        #header {
            background: linear-gradient(135deg, var(--nepali-blue), var(--nepali-red));
            color: white;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.15);
        }
        #logo {
            width: 36px;
            height: 36px;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3 2"><rect width="3" height="2" fill="%23003893"/><path d="M0 0 L2 0 L0 1 Z" fill="white"/><path d="M0 1 L2 1 L0 2 Z" fill="%23DC143C"/><circle cx="0.8" cy="1" r="0.2" fill="white"/></svg>') no-repeat center/contain;
            filter: drop-shadow(0 1px 2px rgba(0,0,0,0.3));
        }
        #chat-container {
            max-width: 800px;
            margin: 0 auto;
            height: calc(100vh - 140px);
            overflow-y: auto;
            padding: 20px 15px 80px;
            scroll-behavior: smooth;
        }
        .message {
            display: flex;
            margin-bottom: 18px;
            align-items: flex-start;
        }
        .user-message {
            justify-content: flex-end;
        }
        .message-content {
            max-width: 85%;
            padding: 14px 18px;
            border-radius: 18px;
            line-height: 1.5;
            position: relative;
        }
        .user-message .message-content {
            background: var(--nepali-blue);
            color: white;
            border-bottom-right-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .bot-message .message-content {
            background: white;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            border-left: 4px solid var(--ai-blue);
        }
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 12px;
            flex-shrink: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }
        .user-avatar {
            background: var(--nepali-red);
        }
        .bot-avatar {
            background: var(--ai-blue);
            box-shadow: 0 0 0 2px white, 0 0 0 4px var(--ai-blue);
        }
        pre {
            background: var(--code-bg);
            color: #4EC9B0;
            padding: 14px;
            border-radius: 8px;
            overflow-x: auto;
            font-family: 'Fira Code', monospace;
            font-size: 14px;
            margin: 10px 0;
            position: relative;
        }
        .copy-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255,255,255,0.15);
            border: none;
            color: white;
            padding: 4px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }
        .copy-btn:hover {
            background: rgba(255,255,255,0.25);
        }
        #input-area {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            padding: 15px 20px;
            display: flex;
            gap: 12px;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            z-index: 10;
        }
        #user-input {
            flex: 1;
            padding: 14px 18px;
            border: 2px solid #e9ecef;
            border-radius: 24px;
            outline: none;
            font-size: 16px;
            transition: all 0.3s;
        }
        #user-input:focus {
            border-color: var(--ai-blue);
            box-shadow: 0 0 0 3px rgba(37, 162, 240, 0.2);
        }
        #send-btn {
            width: 52px;
            height: 52px;
            border-radius: 50%;
            border: none;
            background: var(--nepali-red);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        #send-btn:hover {
            background: #c1121f;
            transform: scale(1.05);
        }
        #send-btn:active {
            transform: scale(0.98);
        }
        .typing-indicator {
            display: flex;
            gap: 8px;
            padding: 10px 0;
        }
        .typing-dot {
            width: 10px;
            height: 10px;
            background: var(--ai-blue);
            border-radius: 50%;
            opacity: 0.4;
            animation: typing 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.4; }
            30% { transform: translateY(-6px); opacity: 1; }
        }
        .ai-signature {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-top: 8px;
            font-size: 12px;
            color: #6c757d;
        }
        .ai-signature-logo {
            width: 16px;
            height: 16px;
            background: var(--ai-blue);
            border-radius: 2px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="logo"></div>
        <h1 style="margin:0;font-weight:600">KRB AI</h1>
    </div>
    <div id="chat-container"></div>
    <div id="input-area">
        <input type="text" id="user-input" placeholder="Message KRB AI..." autocomplete="off">
        <button id="send-btn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M22 2L11 13" stroke="white" stroke-width="2" stroke-linecap="round"/>
                <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </button>
    </div>

    <script>
        // Configuration - Only edit these!
        const API_KEY = "P5JbFq9z7qSae8e3FNoyknfCF9eGTRpq"; // Get from DeepInfra
        const AI_MODEL = "meta-llama/Meta-Llama-3-70B-Instruct"; // Best free model for current data
        const SYSTEM_PROMPT = `You are KRB AI, an advanced assistant with knowledge until mid-2024. 
Respond concisely in 1-3 paragraphs. For code, use markdown with syntax highlighting. 
When unsure, say "I don't have recent data on this."`;

        // DOM Elements
        const chatContainer = document.getElementById('chat-container');
        const userInput = document.getElementById('user-input');
        const sendBtn = document.getElementById('send-btn');

        // Initial greeting
        addBotMessage("Hello! I'm KRB AI. How can I assist you today?");

        // Event Listeners
        sendBtn.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Main Functions
        async function sendMessage() {
            const message = userInput.value.trim();
            if (!message) return;
            
            addUserMessage(message);
            userInput.value = '';
            
            const typingId = showTypingIndicator();
            
            try {
                const response = await fetch("https://api.deepinfra.com/v1/openai/chat/completions", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${API_KEY}`
                    },
                    body: JSON.stringify({
                        model: AI_MODEL,
                        messages: [
                            { role: "system", content: SYSTEM_PROMPT },
                            { role: "user", content: message }
                        ],
                        temperature: 0.7,
                        max_tokens: 300
                    })
                });
                
                if (!response.ok) throw new Error(`API Error: ${response.status}`);
                
                const data = await response.json();
                const reply = formatResponse(data.choices[0].message.content);
                
                updateMessage(typingId, reply);
                addCopyButtons();
                
            } catch (error) {
                updateMessage(typingId, `‚ö†Ô∏è Error: ${error.message}`);
            }
        }

        // UI Helpers
        function addUserMessage(text) {
            const id = "msg-" + Date.now();
            chatContainer.innerHTML += `
                <div class="message user-message" id="${id}">
                    <div class="message-avatar user-avatar">You</div>
                    <div class="message-content">${text}</div>
                </div>
            `;
            scrollToBottom();
            return id;
        }

        function addBotMessage(text) {
            const id = "msg-" + Date.now();
            chatContainer.innerHTML += `
                <div class="message bot-message" id="${id}">
                    <div class="message-avatar bot-avatar">AI</div>
                    <div class="message-content">
                        ${text}
                        <div class="ai-signature">
                            <div class="ai-signature-logo">KRB</div>
                            <span>AI Assistant</span>
                        </div>
                    </div>
                </div>
            `;
            scrollToBottom();
            return id;
        }

        function showTypingIndicator() {
            const id = "typing-" + Date.now();
            chatContainer.innerHTML += `
                <div class="message bot-message" id="${id}">
                    <div class="message-avatar bot-avatar">AI</div>
                    <div class="message-content">
                        <div class="typing-indicator">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                </div>
            `;
            scrollToBottom();
            return id;
        }

        function updateMessage(id, newContent) {
            const messageDiv = document.getElementById(id);
            if (messageDiv) {
                messageDiv.querySelector('.message-content').innerHTML = `
                    ${newContent}
                    <div class="ai-signature">
                        <div class="ai-signature-logo">KRB</div>
                        <span>AI Assistant</span>
                    </div>
                `;
            }
            scrollToBottom();
        }

        function formatResponse(text) {
            // Format code blocks
            text = text.replace(/```(\w*)([\s\S]*?)```/g, '<pre>$2</pre>');
            
            // Format bold/italic
            text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
            
            return text;
        }

        function addCopyButtons() {
            document.querySelectorAll('pre').forEach(pre => {
                if (!pre.querySelector('.copy-btn')) {
                    const copyBtn = document.createElement('button');
                    copyBtn.className = 'copy-btn';
                    copyBtn.textContent = 'Copy';
                    copyBtn.onclick = () => {
                        navigator.clipboard.writeText(pre.textContent);
                        copyBtn.textContent = 'Copied!';
                        setTimeout(() => copyBtn.textContent = 'Copy', 2000);
                    };
                    pre.appendChild(copyBtn);
                }
            });
        }

        function scrollToBottom() {
            setTimeout(() => {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }, 50);
        }
    </script>
</body>
</html>